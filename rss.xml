<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">

<channel>
  <title>Obachuka</title>
  <link>http://obachuka.com</link>
  <description>Obachuka's personal website</description>
  <atom:link href="http://obachuka.com/rss.xml" rel="self" type="application/rss+xml" />
  <language>en</language>

  <item>
    <title>Blindspot</title>
    <link>http://obachuka.com/2016/07/22/</link>
    <description><![CDATA[<p>I've made this game multiple times now, as it's my "hello world" for video game technology. The rules are simple and everything is a circle. In every iteration of my game, I always had a dot that followed the player around, and this dot had always had a blindspot. If the dot got within a certain radius of the player, it slowed down. Having the dot always track the player got tiring, so I included the blindspot to give the player some breathing space. Unlike the other dots, this dot was actually easier to avoid if the player stayed in the same spot. My friends playtested this game, but very few of them ever realized that.</p> <img src="http://i.imgur.com/ZoyVDw3.gif"> <p>This time though, the radius of the blindspot fluctuates. If the player moves fast and is constantly outside the dots' blindspots, these dots eventually begin overlapping each other. With the changing radius, even though they still clump together, they won't overlap completely now. Plus, this keeps the breathing space the player gets from being too rigid.</p> <img src="http://i.imgur.com/eHUi7Ch.png">]]></description>
    <guid>http://obachuka.com/2016/07/22/</guid>
  </item>

  <item>
    <title>It counts</title>
    <link>http://obachuka.com/2016/07/21/</link>
    <description><![CDATA[<p>I didn't get much done in the morning, then in the evening, I went to the movies with my friedns. I still managed to write a few lines of code though, so I'm still counting that as a success. In the game over screen, I'm going to leave one dot behind, and use that as the start button. I want it so that players can't start the game without knowing how to play. An invisible tutorial of sorts. I'll talk more about it tommorrow, I'm tired today.</p>
]]></description>
    <guid>http://obachuka.com/2016/07/21/</guid>
  </item>

  <item>
    <title>Game over</title>
    <link>http://obachuka.com/2016/07/20/</link>
    <description><![CDATA[<img src="http://i.imgur.com/DoftsPa.gif"> <p>Previously I just laziy outputted to the debug log when the player "died." Now I have a real game over state. I need to add a play button and other options.</p> <p>Doing this was also easy. I compile my code in two parts, the game code and a glorified main loop that calls the game code. In the game code, I export an update function that the main loop calls every frame. To switch "modes," I just switch the function the main loop uses to update the game.</p> <p>I thought swapping the update function would break my replay debugging ability, but as long as I record function pointers, it still works because the function is still in the same location. Even if I dynamically load a new function from a dynamic library, the function will stay in the same place as long as I don't change the number of lines in the update function. Which is the same behavior before I made this change anyways. I'm pretty sure I can depend on that behavior, but I should look it up just in case.</p> <p>Something that was actually broken (and broken the entire time) was that my random number generation isn't reset upon every replay. I wanted it to be deterministic, but different replays could have different results because of this. I think if I just reseed the rng every time I start a replay, it will fix this.</p>]]></description>
    <guid>http://obachuka.com/2016/07/20/</guid>
  </item>

  <item>
    <title>Explosion colors!</title>
    <link>http://obachuka.com/2016/07/19/</link>
    <description><![CDATA[<img src="http://i.imgur.com/sOwHwj4.gif"> <p>This was remarkably easy to implement, around ten lines of code. As mentioned, I story every object in the game as the same struct, with different behaviours determined by the position in an array. I origanally thought this would be extremely inflexible, but adding new features to the game so far has been incredibly easy.</p>]]></description>
    <guid>http://obachuka.com/2016/07/19/</guid>
  </item>

  <item>
    <title>Yellow and green</title>
    <link>http://obachuka.com/2016/07/17/</link>
    <description><![CDATA[<img src="http://i.imgur.com/Wbo3NCM.gif"> <p>Yellow and green dots! I'll have purple and orange next. I was watching EVO today, and had it playing in the background. And yet I was surprisingly productive. I should have some background noise playing more often, preferably some sport I'm not interested in.</p>]]></description>
    <guid>http://obachuka.com/2016/07/17/</guid>
  </item>

  <item>
    <title>Core gameplay complete</title>
    <link>http://obachuka.com/2016/07/16/</link>
    <description><![CDATA[<p>My basic gameplay is complete. The rest is adding more features and polish.</p> <img src="http://i.imgur.com/FD4fTp9.gif"> <p>While recording this, I noticed I had a bug with my replay/text. When a replay starts, the score disappears, and reappears when my score is updated. My entire game is stack allocated, so to save replays, I output all of the memory into a file, then read it back in again later. This wouldn't work for something dynamically allocated, as the memory will be in a different location on each replay. And guess what's the only thing that's dynamically allocated? That's right, the same font rendering I complained about yesterday. So when the replay starts, the memory for the score is invalid. Then when the score is updated, an entirely new texture is generated. I don't intend to fix this bug though, because once I switch to using images, I won't have this problem, since my images won't be dynamically updated in the middle of the game.</p>]]></description>
    <guid>http://obachuka.com/2016/07/16/</guid>
  </item>

  <item>
    <title>Rendering dumb C strings</title>
    <link>http://obachuka.com/2016/07/15/</link>
    <description><![CDATA[<p>One of the few things I actually like about high level languages is their string handling. Strings in C are mad annoying. I tried rendering a score to my game using SDL2_ttf, and tell it the font, string, position, width, and height of where to draw the text. But it doesn't display at a standard font size, e.g. 16pt font if I specify 16pt. Instead, the text is converted into a texture and stretched to fit the whole drawing area.</p> <img src="http://i.imgur.com/VPjI4V7.png"> <p>That's dumb. But this ain't a high level language. This is C. So to get around this, I just formatted the string to begin with a bunch of leading 0s.</p> <img src="http://i.imgur.com/D3vWa5n.png"> <p>But that looks ugly. And my font is still pixellated, most definitely because the texture is still being stretched. Honestly, if the font is going to be converted into a texture and look ugly doing it, I might as well create my own font using images. I try to avoid using strings anyways, even if I'm using Java or Python.</p>]]></description>
    <guid>http://obachuka.com/2016/07/15/</guid>
  </item>

  <item>
    <title>Red and blue</title>
    <link>http://obachuka.com/2016/07/14/</link>
    <description><![CDATA[<img src="http://i.imgur.com/kN11Vrt.png">]]></description>
    <guid>http://obachuka.com/2016/07/14/</guid>
  </item>

</channel>
</rss>
